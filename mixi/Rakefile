require 'active_record'
require 'yaml'
require 'logger'
require File.expand_path('../db/seeds.rb', __FILE__)
require File.expand_path('../lib/comment.rb', __FILE__)
require File.expand_path('../lib/user.rb', __FILE__)
require File.expand_path('../lib/agent.rb', __FILE__)
require File.expand_path('../lib/topics.rb', __FILE__)
require File.expand_path('../lib/gmail.rb', __FILE__)

namespace :db do
  MIGRATIONS_DIR = File.expand_path('../db/migrate', __FILE__)
  DATASOURCE_CONFIG = File.expand_path('../config/database.yml', __FILE__)

  desc 'Migrate the database'
  task :migrate => :environment do
    ActiveRecord::Migrator.migrate(MIGRATIONS_DIR, ENV["VERSION"] ? ENV["VERSION"].to_i : nil)
  end

  task :environment do
    dbconfig = YAML.load_file DATASOURCE_CONFIG
    environment = ENV['ENV'] ? ENV['ENV'] : 'development'
    ActiveRecord::Base.establish_connection(dbconfig["db"][environment])
    ActiveRecord::Base.logger = Logger.new(STDOUT)
  end

  desc 'Roll back the databse schema to the previous version'
  task :rollback do
    ActiveRecord::Migrator.rollback(MIGRATIONS_DIR, ENV["STEP"] ? ENV["STEP"].to_i : 1)
  end

  desc 'insert test data'
  task :seed => :environment do
    Turks::LoadSeed.truncate
    Turks::LoadSeed.load
  end
end

namespace :mixi do
  desc 'post comment'
  task :post_comment do
    logger = Logger.new File.expand_path('../logs/comment.log', __FILE__)
    logger.level = Logger::INFO
    user = Turks::MixiUser.new
    agent = Turks::MixiAgent.new
    begin
      agent.authenticate(user.email, user.password)
      topics = Turks::Topics.active_topics
      topics.each do |top|
        cid = top.community_id
        tid = top.topic_id
        agent.get("http://mixi.jp/view_bbs.pl?comm_id=#{cid}&id=#{tid}")
        alert = agent.search('p.messageAlert')
        if Turks::Topics.max?(agent, top, tid) || alert.present?
          Turks::Topics.add(agent, top)
        end
        Turks::Comment.post(agent, "bbs_comment_form", top.comment)
        logger.info "has completed uploading comment at community_id = #{cid}, topic_id = #{tid}."
      end
    rescue => e
      logger.info(agent.mecha.page)
      logger.info("cannot post comment. message=#{e.message}")
      logger.info e.backtrace
      Turks::Mail.mail("takaty2011@gmail.com", "error occured", e.backtrace)
    end
  end
end

